
---

# API Documentation

## 1. Authentication API

### 1.1 Register
- **Endpoint:** `POST /api/v1/auth/register`
- **Description:** Register a new user.
- **Request Body:** Includes fields for username, email, password, and phone number.
- **Response:**
  - **Success (201):** Returns a success message and user details.
  - **Error (400):** Indicates validation errors or that the user already exists.

### 1.2 Login
- **Endpoint:** `POST /api/v1/auth/login`
- **Description:** Authenticate a user and obtain a JWT token.
- **Request Body:** Requires email and password.
- **Response:**
  - **Success (200):** Returns a JWT token and user details.
  - **Error (401):** Indicates invalid email or password.

## 2. User API

### 2.1 Get Profile
- **Endpoint:** `GET /api/v1/users/profile`
- **Description:** Retrieve the profile of the logged-in user.
- **Headers:** Requires a JWT token in the Authorization header.
- **Response:**
  - **Success (200):** Returns user profile details.
  - **Error (401):** Indicates unauthorized access.

### 2.2 Update Profile
- **Endpoint:** `PUT /api/v1/users/profile`
- **Description:** Update user profile information.
- **Headers:** Requires a JWT token in the Authorization header.
- **Request Body:** Includes fields for bio and image URL.
- **Response:**
  - **Success (200):** Returns a success message and updated user profile.
  - **Error (400):** Indicates validation errors.

## 3. Restaurant API

### 3.1 Create Restaurant
- **Endpoint:** `POST /api/v1/restaurants`
- **Description:** Create a new restaurant.
- **Request Body:** Includes fields for name, location, and description.
- **Response:**
  - **Success (201):** Returns a success message and restaurant details.
  - **Error (400):** Indicates validation errors or that the restaurant already exists.

### 3.2 Update Restaurant
- **Endpoint:** `PUT /api/v1/restaurants/:id`
- **Description:** Update restaurant details by custom ID.
- **Request Body:** Includes fields for name, location, and description.
- **Response:**
  - **Success (200):** Returns a success message and updated restaurant details.
  - **Error (400):** Indicates validation errors.

### 3.3 Get Restaurant
- **Endpoint:** `GET /api/v1/restaurants/:id`
- **Description:** Retrieve details of a restaurant by custom ID.
- **Response:**
  - **Success (200):** Returns restaurant details.
  - **Error (404):** Indicates that the restaurant was not found.

### 3.4 Delete Restaurant
- **Endpoint:** `DELETE /api/v1/restaurants/:id`
- **Description:** Delete a restaurant by custom ID.
- **Response:**
  - **Success (200):** Returns a success message indicating the restaurant was deleted.
  - **Error (404):** Indicates that the restaurant was not found.

## 4. Meal API

### 4.1 Add New Meal
- **Endpoint:** `POST /api/v1/meals`
- **Description:** Add a new meal to a restaurant.
- **Request Body:** Includes fields for meal name, description, price, and restaurant ID.
- **Response:**
  - **Success (201):** Returns a success message and meal details.
  - **Error (400):** Indicates validation errors or that the meal could not be added.

### 4.2 Update Meal
- **Endpoint:** `PUT /api/v1/meals/:id`
- **Description:** Update details of a meal by meal ID.
- **Request Body:** Includes fields for meal name, description, price.
- **Response:**
  - **Success (200):** Returns a success message and updated meal details.
  - **Error (400):** Indicates validation errors.

### 4.3 Get Meal
- **Endpoint:** `GET /api/v1/meals/:id`
- **Description:** Retrieve details of a meal by meal ID.
- **Response:**
  - **Success (200):** Returns meal details.
  - **Error (404):** Indicates that the meal was not found.

### 4.4 Delete Meal
- **Endpoint:** `DELETE /api/v1/meals/:id`
- **Description:** Delete a meal by meal ID.
- **Response:**
  - **Success (200):** Returns a success message indicating the meal was deleted.
  - **Error (404):** Indicates that the meal was not found.

### 4.5 Add Batch Meals
- **Endpoint:** `POST /api/v1/meals/batch`
- **Description:** Add multiple meals to a restaurant in a batch.
- **Request Body:** Includes an array of meals with their details.
- **Response:**
  - **Success (201):** Returns a success message and details of added meals.
  - **Error (400):** Indicates validation errors or that the batch could not be processed.

---

# Models Summary

## User
- Fields: username, email, password, phoneNumber, isVerified, orderHistory, byteBalance, bio, verificationCode, phoneVerificationCode, resetCode, resetCodeExpires, imageUrl, superAdmin, location, nearestLandmark, notifications, timestamps
- Purpose: Represents an end user of the platform, including authentication, profile, balance, and notification info.

## Restaurant
- Fields: customId, name, bankName, accountNumber, accountHolder, email, description, location, contactNumber, imageUrl, password, walletBalance, isVerified, verificationCode, meals, notifications, orders, isActive, timestamps
- Purpose: Represents a restaurant, including authentication, menu, orders, and wallet info.

## Meal
- Fields: customId, name, description, tag, per, price, availability, imageUrl, restaurant, timestamps
- Purpose: Represents a meal offered by a restaurant.

## Order
- Fields: customId, user, meals (with quantity), note, nearestLandmark, fee, requestedFee, requestDescription, totalPrice, status, location, phoneNumber, orderDate, restaurant, timestamps
- Purpose: Represents a food order placed by a user at a restaurant.

## Payment
- Fields: reference, amount, email, user_id, status, createdAt
- Purpose: Represents a payment transaction for orders or wallet top-ups.

## Withdrawal
- Fields: restaurantName, amount, status, createdAt, updatedAt
- Purpose: Represents a withdrawal request by a restaurant.

## Notification
- Fields: userId, restaurantId, message, isRead, timestamps
- Purpose: Represents notifications sent to users or restaurants.

---

# API Endpoints (Full List)

## Auth APIs
- POST   /register                - Register a new user
- POST   /login                   - User login
- GET    /verify-email            - Verify user email
- POST   /forgot-password         - Request password reset
- POST   /reset-password          - Reset password

## User APIs
- POST   /upload                  - Upload user image
- GET    /getProfile              - Get user profile
- POST   /updateProfile           - Update user profile
- POST   /updateByteBalance       - Update user byte balance
- GET    /restaurants             - List all restaurants
- POST   /transfer                - Transfer bytes to another user
- GET    /restdetails/:id         - Get restaurant details by ID
- GET    /notifications           - Get user notifications
- GET    /orders/:username        - Get user order history

## Super Admin APIs
- POST   /restaurants             - Create a restaurant
- DELETE /restaurants/:id         - Delete a restaurant
- GET    /allrestaurants          - List all restaurants
- GET    /restaurants/:id         - Get restaurant by ID
- GET    /orders                  - List all orders
- GET    /orders/:orderId         - Get order by ID

## Payment APIs
- POST   /pay                     - Initiate payment
- GET    /callback                - Payment callback/verification

## Order APIs
- POST   /create                  - Create a new order
- GET    /restaurant/:customId    - Get orders for a restaurant
- GET    /:orderId                - Get order by ID
- GET    /:userId/order-history   - Get user order history
- PATCH  /:orderId                - Confirm order
- PATCH  /deliver/:orderId        - Mark order as delivered
- POST   /:orderId/status         - Update order status

## Meal APIs
- POST   /:customId/create        - Create a meal for a restaurant
- GET    /                        - List all meals
- GET    /:id                     - Get meal by ID
- PUT    /:id                     - Update meal by ID
- DELETE /:id                     - Delete meal by ID

## Restaurant APIs
- GET    /mymeals/:customId       - Get meals for a restaurant
- POST   /create                  - Create a restaurant
- POST   /withdraw                - Create a withdrawal request
- POST   /login                   - Restaurant login
- GET    /                        - List all restaurants
- GET    /:id                     - Get restaurant by ID
- PUT    /:id                     - Update restaurant by ID
- DELETE /:id                     - Delete restaurant by ID
- PATCH  /:id/toggle-active       - Toggle restaurant active status

---
